#include <Servo.h>
#include <SPI.h>
#include <nRF24L01.h>
#include <RF24.h>

// NRF24L01 configuration
#define CE_PIN 9
#define CSN_PIN 10
RF24 radio(CE_PIN, CSN_PIN);
const byte address[6] = "00001";

// Servo objects
Servo servo1;
Servo servo2;
Servo servo3;
Servo servo4;

// Servo pins
#define SERVO1_PIN 3
#define SERVO2_PIN 5
#define SERVO3_PIN 6
#define SERVO4_PIN 9

// Variables for servo angles
int servoAngles[4] = {90, 90, 90, 90}; // Initial angles for all servos

void setup() {
  // Initialize Serial communication
  Serial.begin(9600);

  // Initialize NRF24L01
  if (!radio.begin()) {
    Serial.println("NRF24L01 initialization failed!");
    while (1);
  }
  radio.openReadingPipe(0, address);
  radio.setPALevel(RF24_PA_LOW);
  radio.startListening();

  // Attach servos to respective pins
  servo1.attach(SERVO1_PIN);
  servo2.attach(SERVO2_PIN);
  servo3.attach(SERVO3_PIN);
  servo4.attach(SERVO4_PIN);

  // Set servos to initial positions
  updateServoPositions();

  Serial.println("System initialized. Waiting for commands...");
}

void loop() {
  // Receive data from NRF24L01
  if (radio.available()) {
    char text[32] = "";
    radio.read(&text, sizeof(text));
    Serial.print("Received: ");
    Serial.println(text);

    // Parse received data for servo control
    parseServoCommands(text);
  }

  // Camera detection logic (simulated here)
  if (esp32CamDetectsObject()) {
    Serial.println("Object detected by ESP32-CAM. Moving arm.");
    performDetectionAction();
  }
}

void parseServoCommands(char* command) {
  // Example command format: "S1:45,S2:90,S3:135,S4:180"
  char* token = strtok(command, ",");
  int i = 0;
  while (token != NULL && i < 4) {
    if (sscanf(token, "S%d:%d", &i, &servoAngles[i - 1]) == 2) {
      servoAngles[i - 1] = constrain(servoAngles[i - 1], 0, 180);
    }
    token = strtok(NULL, ",");
  }
  updateServoPositions();
}

void updateServoPositions() {
  servo1.write(servoAngles[0]);
  servo2.write(servoAngles[1]);
  servo3.write(servoAngles[2]);
  servo4.write(servoAngles[3]);
}

bool esp32CamDetectsObject() {
  // Simulate ESP32-CAM detection logic
  // Replace with actual logic or communication with ESP32-CAM
  return random(0, 100) < 10; // Simulated 10% chance of detection per loop
}

void performDetectionAction() {
  // Example action: Move servos to specific positions
  servo1.write(45);
  servo2.write(90);
  servo3.write(135);
  servo4.write(180);
  delay(2000); // Hold position for 2 seconds

  // Return to initial position
  updateServoPositions();
}
